from unittest import TestCase


class TestGeneratorOutputParser(TestCase):
    def test_parse(self):
        text = "```json\n{\n  \"exercise\": \"In Golang, design an advanced system using object-oriented principles to model a library system. The system should handle multiple types of media, such as books, DVDs, and magazines, using inheritance. Implement the following functionalities:\\n\\n1. Create a base struct `Media` that contains common properties like `Title`, `Publisher`, and `Year`. \\n2. Derive specialized structs `Book`, `DVD`, and `Magazine` from `Media`. Each derived struct should have additional specific properties (e.g., `Author` for `Book`, `Director` for `DVD`, and `IssueNumber` for `Magazine`).\\n3. Implement a method for each derived struct to display detailed information specific to that media type.\\n4. Use interfaces and embedding to demonstrate polymorphism where a single function can handle any media type to display their information.\\n5. Introduce a `Library` struct that can store a collection of media items and provide a method to display all media details.\\n\\nWrite the necessary Go code to define these structs, methods, and demonstrate the functionality with a sample collection of media items in a library.\",\n  \"answer\": \"```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\n// Base struct\\ntype Media struct {\\n\\tTitle    string\\n\\tPublisher string\\n\\tYear     int\\n}\\n\\n// Book struct inheriting Media\\ntype Book struct {\\n\\tMedia\\n\\tAuthor string\\n}\\n\\n// DVD struct inheriting Media\\ntype DVD struct {\\n\\tMedia\\n\\tDirector string\\n}\\n\\n// Magazine struct inheriting Media\\ntype Magazine struct {\\n\\tMedia\\n\\tIssueNumber int\\n}\\n\\n// Interface for displaying media details\\ntype MediaDetails interface {\\n\\tDisplayDetails()\\n}\\n\\n// Method for Book\\nfunc (b Book) DisplayDetails() {\\n\\tfmt.Printf(\\\"Book: %s by %s, published by %s in %d\\\\n\\\", b.Title, b.Author, b.Publisher, b.Year)\\n}\\n\\n// Method for DVD\\nfunc (d DVD) DisplayDetails() {\\n\\tfmt.Printf(\\\"DVD: %s directed by %s, published by %s in %d\\\\n\\\", d.Title, d.Director, d.Publisher, d.Year)\\n}\\n\\n// Method for Magazine\\nfunc (m Magazine) DisplayDetails() {\\n\\tfmt.Printf(\\\"Magazine: %s, Issue %d, published by %s in %d\\\\n\\\", m.Title, m.IssueNumber, m.Publisher, m.Year)\\n}\\n\\n// Library struct containing media\\ntype Library struct {\\n\\tmediaCollection []MediaDetails\\n}\\n\\n// Method to display all media details\\nfunc (l *Library) DisplayAllMedia() {\\n\\tfor _, media := range l.mediaCollection {\\n\\t\\tmedia.DisplayDetails()\\n\\t}\\n}\\n\\nfunc main() {\\n\\t// Sample media items\\n\\tbook := Book{Media{\\\"The Great Gatsby\\\", \\\"Scribner\\\", 1925}, \\\"F. Scott Fitzgerald\\\"}\\n\\tdvd := DVD{Media{\\\"Inception\\\", \\\"Warner Bros.\\\", 2010}, \\\"Christopher Nolan\\\"}\\n\\tmagazine := Magazine{Media{\\\"National Geographic\\\", \\\"National Geographic Society\\\", 2021}, 5}\\n\\n\\t// Library containing media items\\n\\tlibrary := Library{\\n\\t\\tmediaCollection: []MediaDetails{book, dvd, magazine},\\n\\t}\\n\\n\\t// Display all media details\\n\\tlibrary.DisplayAllMedia()\\n}\\n```\",\n  \"explanation\": \"The solution models a library system using Go's structs and interfaces to demonstrate inheritance and polymorphism, fitting the advanced difficulty level. \\n\\n1. **Inheritance** in Go is achieved through struct embedding. The `Book`, `DVD`, and `Magazine` structs embed the base `Media` struct, inheriting its properties. This mimics class inheritance in languages like Java or C++. Each derived struct adds extra fields specific to the media type.\\n\\n2. **Polymorphism** is handled using interfaces. The `MediaDetails` interface requires a `DisplayDetails` method. Each media type implements this method, allowing for polymorphic behavior. The `Library` struct stores a collection of `MediaDetails` interfaces, enabling it to handle different media types uniformly.\\n\\n3. **Method Implementation**: Each media type has its own `DisplayDetails` method which provides custom output. This shows how polymorphism allows different behaviors for the same method call.\\n\\n4. **Library System**: The `Library` struct holds a slice of `MediaDetails`, and its `DisplayAllMedia` method iterates over this collection, calling `DisplayDetails` on each item. This illustrates the power of polymorphism in managing diverse types through a single interface.\\n\\n5. **Design Choices**: Using interfaces and embedding in Go leverages its strengths in composition over inheritance. This approach is efficient and idiomatic in Go, as it avoids the complexities and pitfalls of deep inheritance hierarchies.\\n\\nAlternative approaches could involve more complex systems, like adding borrowing functionality, but this design comprehensively illustrates the inheritance and polymorphism concepts in an advanced OOP exercise.\",\n  \"level\": \"advanced\"\n}\n```"

